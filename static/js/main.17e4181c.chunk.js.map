{"version":3,"sources":["cell/Cell.js","row/Row.js","board/Board.js","game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","style","children","onClick","clicked","className","id","Row","Board","board","collection","map","row","i","key","cell","j","Game","state","cells","moved","finished","start","timer","orderedArray","zeroColIndex","zeroRowIndex","rowOfZero","colOfZero","chunk","array","size","chunked_arr","length","last","push","handleClick","e","value","target","rowIndexClicked","columnIndexClicked","rowWhereClicked","colWhereClicked","direction","numbers","updateCollection","indexOf","collInitial","rowInitial","colZeroImmutable","rowZeroInmutable","count","actualValue","nextValue","setState","movements","resolved","join","clearInterval","intervalTimer","startGame","a","shuffle","require","Array","Math","pow","keys","JSON","stringify","substr","columnIndex","rowIndex","game","document","getElementById","title","querySelector","width","screen","paddingTop","fontSize","setTimeout","timerStart","scrollIntoView","block","behavior","onChange","val","String","parseInt","handlerRestart","querySelectorAll","forEach","div","classList","remove","this","setInterval","isFinished","htmlFor","type","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.17e4181c.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Cell(props) {\n    \n    return (\n        <div style={{'background' : props.children === 0 ? 'white' : ''}} onClick={props.clicked} className=\"cell\" id={props.children}>\n            {props.children !== 0 ? props.children : \n            <span style={{'opacity' : '0'}}>0</span>\n        }\n        </div>\n    )\n}","import React from 'react';\n\nexport default function Row(props) {\n    return (\n        <div className=\"row\">\n            {props.children}\n        </div>\n    )\n}","import React from 'react';\nimport Cell from '../cell/Cell';\nimport Row from '../row/Row';\n\nexport default function Board(props) {\n\n    const board = props.collection.map( (row,i) => (\n        <Row key={i}>\n            {row.map((cell,j) => (\n                <Cell clicked={props.clicked} key={j}>{cell}</Cell>\n            ))}\n        </Row>\n    ));\n\n    return(\n        <div className=\"board\" id=\"board\">\n            {board}\n        </div>\n    )\n}","/* eslint-disable eqeqeq */\nimport React, { Component } from 'react';\nimport Board from '../board/Board';\n\nexport default class Game extends Component {\n\n    // Starting with 4 so it is an 15 pieces-puzzle to solve\n    state={\n        cells: 4, // Change here if you want fewer than 4 cells\n        moved: 0, // Not fixed yet.\n        finished: false,\n        collection: [],\n        start: false,\n        timer: 0,\n        orderedArray: '',\n        zeroColIndex: 0,\n        zeroRowIndex: 0,\n        rowOfZero: 0,\n        colOfZero: 0\n\n    }\n    // Create emoty array\n    chunk = (array, size) => {\n        const chunked_arr = [];\n        for (let i = 0; i < array.length; i++) {\n            const last = chunked_arr[chunked_arr.length -1];\n            if (!last || last.length === size ) {\n                chunked_arr.push([array[i]]);\n            } else {\n                last.push(array[i]);\n            }\n        }\n        return chunked_arr;\n    }\n\n    handleClick = (e) => {\n\n        const value = e.target.id;\n\n        if (value == 0) {\n            return;\n        }\n\n        let zeroColIndex = this.state.zeroColIndex\n        let zeroRowIndex = this.state.zeroRowIndex\n        let rowOfZero = this.state.rowOfZero\n        let colOfZero = this.state.colOfZero\n\n        let rowIndexClicked = -1;\n        let columnIndexClicked = -1;\n        let rowWhereClicked = -1;\n        let colWhereClicked = -1;\n        let direction = \"\"\n        let numbers = []\n\n        const updateCollection = this.state.collection;\n\n        let moved = false\n        \n        for (const row in updateCollection) {\n            if (updateCollection[row].indexOf(+value) >= 0) {\n                columnIndexClicked = updateCollection[row].indexOf(+value)\n                rowIndexClicked = updateCollection.indexOf(updateCollection[row]);\n                rowWhereClicked = row\n                colWhereClicked = updateCollection[row].indexOf(+value)\n                break;\n            }\n        }\n\n        if (colWhereClicked == zeroColIndex) {\n\n            let collInitial = columnIndexClicked\n            let rowInitial = rowIndexClicked\n\n            const colZeroImmutable = columnIndexClicked\n            const rowZeroInmutable = rowIndexClicked\n\n            if (rowWhereClicked > rowOfZero) {\n                direction = \"down\"\n            } else {\n                direction = \"up\"\n            }\n\n            let count = 0\n\n            // Current value\n            let actualValue = updateCollection[rowInitial][collInitial]\n            let nextValue = 0\n\n            while (true) {\n                count += 1\n                numbers.push(actualValue)\n\n                // Next value\n                if (direction == \"up\") {\n                    rowInitial += 1\n                    nextValue = updateCollection[rowInitial][collInitial]\n                } else {\n                    rowInitial -= 1\n                    nextValue = updateCollection[rowInitial][collInitial]\n                }\n\n                if (nextValue == 0) {\n                    for (let i = 0; i < count; i++) {\n                        if (direction == \"up\") {\n                            rowIndexClicked += 1\n                            updateCollection[rowIndexClicked][columnIndexClicked] = numbers[i]\n                        } else {\n                            rowIndexClicked -= 1\n                            updateCollection[rowIndexClicked][columnIndexClicked] = numbers[i]\n                        }\n                    }\n                    updateCollection[rowZeroInmutable][colZeroImmutable] = 0\n                    this.setState({ collection: updateCollection, zeroColIndex: colZeroImmutable,\n                    zeroRowIndex: rowZeroInmutable, rowOfZero: rowZeroInmutable });\n                    moved = true\n                    break;\n                }\n                actualValue = nextValue\n            }\n        } else if (rowIndexClicked == zeroRowIndex) {\n\n            let collInitial = columnIndexClicked\n            let rowInitial = rowIndexClicked\n\n            const colZeroImmutable = columnIndexClicked\n            const rowZeroInmutable = rowIndexClicked\n\n            if (colWhereClicked > colOfZero) {\n                direction = \"right\"\n            } else {\n                direction = \"left\"\n            }\n\n            let count = 0\n\n            // Current value\n            let actualValue = updateCollection[rowInitial][collInitial]\n            let nextValue = 0\n\n            while (true) {\n                count += 1\n                numbers.push(actualValue)\n\n                // Next value\n                if (direction == \"right\") {\n                    collInitial -= 1\n                    nextValue = updateCollection[rowInitial][collInitial]\n                } else {\n                    collInitial += 1\n                    nextValue = updateCollection[rowInitial][collInitial]\n                }\n\n                if (nextValue == 0) {\n                    for (let i = 0; i < count; i++) {\n                        if (direction == \"right\") {\n                            columnIndexClicked -=1\n                            updateCollection[rowIndexClicked][columnIndexClicked] = numbers[i]\n                        } else {\n                            columnIndexClicked += 1\n                            updateCollection[rowIndexClicked][columnIndexClicked] = numbers[i]\n                        }\n                    }\n                    updateCollection[rowZeroInmutable][colZeroImmutable] = 0\n                    this.setState({ collection: updateCollection, zeroColIndex: colZeroImmutable, zeroRowIndex: rowZeroInmutable, colOfZero: colZeroImmutable });\n                    moved = true\n                    break;\n                }\n                actualValue = nextValue\n            }\n        }\n        // Update movements\n        if (value != 0 && moved) {\n            this.setState({\n                movements: this.setState.movements + 1\n            })\n        }\n\n        moved = false\n\n        // Check if the game is resolved\n        const resolved = this.state.orderedArray == updateCollection.join(\",\")\n        if (resolved) {\n            clearInterval(this.intervalTimer)\n            this.setState({\n                finished: resolved\n            });\n\n        }\n    }\n\n    startGame = async () => {\n\n        // Check the cells for correct value + change 4 here for fewer\n        if (!this.state.cells || this.state.cells < 4) {\n            await this.setState({\n                cells: 4\n            })\n        }\n\n        // Create, shuffle and state the new random numbers-array and start the game.\n        var shuffle = require('shuffle-array');\n        var array = [...Array(Math.pow((this.state.cells), 2)).keys()];\n        shuffle(array);\n        const collection = this.chunk(array, this.state.cells);\n\n        let orderedArray = JSON.stringify([...Array(Math.pow((this.state.cells), 2)).keys()]);\n        orderedArray = orderedArray.substr(1, orderedArray.length -2)\n        orderedArray += \",0\"\n        orderedArray = orderedArray.substr(2)\n        this.setState({\n            orderedArray\n        })\n\n        let columnIndex = 0;\n        let rowIndex = 0;\n        let rowOfZero = 0;\n        let colOfZero = 0;\n\n        for (const row in collection) {\n            if (collection[row].indexOf(0) != -1) {\n                columnIndex = collection[row].indexOf(0);\n                rowIndex = collection.indexOf(collection[row]);\n                rowOfZero = row\n                colOfZero = collection[row].indexOf(0)\n                break;\n            }\n        }\n\n        // Animations\n\n        const game = document.getElementById(\"game\");\n        const title = document.querySelector(\".mainTitle\").children[0];\n        // eslint-disable-next-line no-restricted-globals\n        const width = screen.width;\n        game.style.paddingTop = '0%';\n        if (width > 992) { // desktop\n            title.style.fontSize = '4-rem';\n        } else if (width > 320) { // mobile\n            title.style.fontSize = '2-rem';\n        }\n\n        setTimeout(() => {\n            this.timerStart()\n            this.setState({ collection, start: true, zeroColIndex: columnIndex, zeroRowIndex: rowIndex, rowOfZero, colOfZero });\n            document.getElementById(\"board\").scrollIntoView({ block: 'start', behavior: 'smooth' });\n        }, 666);\n    }\n\n    intervalTimer = 0;\n\n    // Timer\n    timerStart() {\n        this.intervalTimer = setInterval(() => {\n            this.setState({\n                timer: this.state.timer +1\n            })\n        }, 1000);\n    }\n    // This method is called when a component is being removed from the DOM\n    componentWillUnmount() {\n        clearInterval(this.timerStart)\n    }\n\n    onChange = ({ target }) => {\n        let val = target.value\n        if (val === \"\") {\n            val = String(val)\n        } else {\n            val = parseInt(val)\n        }\n        this.setState({\n            cells: val\n        })\n    }\n    // Shuffle\n    handlerRestart = () => {\n        clearInterval(this.intervalTimer);\n        this.setState({\n            timer: 0,\n            moved: 0,\n            finished: false\n        })\n        this.startGame();\n\n        // Get all div´s and disable them\n        const divs = document.querySelectorAll(\".cell\");\n        divs.forEach(div => {\n            div.classList.remove('disable');\n        });\n    }\n\n    render () {\n\n        const isFinished = this.state.finished ? <div className=\"success\"><h4> YES! You did it!!</h4></div> : null;\n\n        return (\n            <div className=\"unselectable\" id=\"game\">\n                <div className=\"mainTitle\">\n                    <h1>P U Z Z L E</h1>\n                </div>\n                <div className=\"displayContainer\">\n                    {this.state.start ?\n                        <div className=\"side\">\n                            <div className=\"statContainer\">\n                                <div className=\"header\">\n                                    Stats:\n                                </div>\n                                <div className=\"statTitle\">\n                                     <strike>Moves</strike>  <span className=\"stat\">{this.state.moved}</span>\n                                </div>\n                                <div className=\"statTitle\">\n                                    Used time:  <span className=\"stat\">{this.state.timer}</span>\n                                </div>\n                            </div>\n                            <div className=\"restartContainer\">\n                                <button onClick={this.handlerRestart} className=\"restartBtn\">Shuffle</button>\n                            </div>\n                            {isFinished}\n                        </div> :\n                        null\n                    }\n                    {this.state.start ? <Board row={this.state.cells} collection={this.state.collection} clicked={this.handleClick} /> : null}\n                    {this.state.start ? null :\n                        <div className=\"cellControllers\">\n                            <div className=\"labelContainer\"><label htmlFor=\"numCellsInput\">Numbers</label></div>\n                            <input value={this.state.cells} onChange={this.onChange} id=\"numCellsInput\" type=\"number\" />\n                            <button className=\"startBtn\" onClick={this.startGame}>Start</button>\n                        </div>\n                    }\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport Game from './game/Game';\nimport './css/main.css';\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}